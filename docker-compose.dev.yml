services:
  proxy:
      image: nginx
      container_name: "reverse-proxy"
      ports:
        - "80:80"
        - "443:443"
      volumes:
        - ./conf.d:/etc/nginx/conf.d:ro
        - ./certbot/conf:/etc/letsencrypt
        - ./certbot/www:/var/www/certbot
      depends_on:
        - snippet-permission
        - permissions-db
        - snippet-manager
        - manager-db
        - snippet-runner
        - azurite-manager
        - api-manager
        - duckdns
  snippet-permission:
    container_name: "snippet-permission"
    image: ghcr.io/ingsis-group-4/snippet-permission-dev:latest
    environment:
      DB_USERNAME: ${PERMISSION_POSTGRES_USER}
      DB_PASSWORD: ${PERMISSION_POSTGRES_PASSWORD}
      DB_NAME: ${PERMISSION_POSTGRES_DB}
      DB_HOST: ${PERMISSION_DB_HOST}
      DB_PORT: ${PERMISSION_DB_PORT}
    depends_on:
      - permissions-db
    expose:
      - "8080"

  permissions-db:
    container_name: "permissions-db"
    image: postgres:latest
    environment:
      POSTGRES_DB: ${PERMISSION_POSTGRES_DB}
      POSTGRES_USER: ${PERMISSION_POSTGRES_USER}
      POSTGRES_PASSWORD: ${PERMISSION_POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - permissions-db:/var/lib/postgresql/data
    expose:
      - "5432"


  snippet-manager:
    container_name: "snippet-manager"
    image: ghcr.io/ingsis-group-4/snippet-manager-dev:latest
    environment:
        DB_USERNAME: ${MANAGER_POSTGRES_USER}
        DB_PASSWORD: ${MANAGER_POSTGRES_PASSWORD}
        DB_NAME: ${MANAGER_POSTGRES_DB}
        DB_HOST: ${MANAGER_DB_HOST}
        DB_PORT: ${MANAGER_DB_PORT}
        SNIPPET_RUNNER_SERVICE_URL: ${SNIPPET_RUNNER_SERVICE_URL}
        REDIS_PORT: 6379
        REDIS_HOST: redis
        REDIS_STREAM_REQUEST_LINT_KEY: request_lint
        REDIS_STREAM_RESULT_LINT_KEY: result_lint
        REDIS_STREAM_GROUP_LINT: lint_group
        AZURITE_BUCKET_URL_V1: ${AZURITE_BUCKET_URL_V1}
        PERMISSION_SNIPPET_SERVICE_URL: ${PERMISSION_SNIPPET_SERVICE_URL}
        AUTH0_MANAGING_TOKEN: ${AUTH0_MANAGING_TOKEN}
    volumes:
      - ./data:/app/data
    expose:
      - "4322"

  api-manager:
    container_name: "asset_service"
    image: ghcr.io/austral-ingsis/snippet-asset-service:latest
    ports:
      - "8081:8080"
    environment:
      AZURE_HOST: "http://azurite"

  azurite-manager:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: "azurite"
    hostname: azurite
    restart: always
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"
    volumes:
      - blob:/workspace

  manager-db:
    container_name: "manager-db"
    image: postgres:latest
    environment:
      POSTGRES_DB: ${MANAGER_POSTGRES_DB}
      POSTGRES_USER: ${MANAGER_POSTGRES_USER}
      POSTGRES_PASSWORD: ${MANAGER_POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - manager-db:/var/lib/postgresql/data
    expose:
      - "5432"

  snippet-runner:
    container_name: "snippet-runner"
    image: ghcr.io/ingsis-group-4/snippet-runner-dev:latest
    expose:
      - 8080
    volumes:
      - .:/app/data
    environment:
      REDIS_PORT: 6379
      REDIS_HOST: redis
      REDIS_STREAM_REQUEST_LINT_KEY: request_lint
      REDIS_STREAM_RESULT_LINT_KEY: result_lint
      REDIS_STREAM_GROUP_LINT: lint_group
      AZURITE_BUCKET_URL_V1: ${AZURITE_BUCKET_URL_V1}

  duckdns:
    image: lscr.io/linuxserver/duckdns:version-d63af1c1
    container_name: duckdns
    environment:
      - SUBDOMAINS=snippet-searcher-dev
      - TOKEN=${DUCK_DNS_TOKEN}
    restart: unless-stopped

  certbot:
    container_name: "certbot"
    image: certbot/certbot:latest
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot/ --force-renewal --email juan.zanelli@ing.austral.edu.ar -d snippet-searcher-dev.duckdns.org --agree-tos

  printscript-ui:
    container_name: "printscript-ui"
    image: ghcr.io/ingsis-group-4/printscript-ui-dev:latest
    expose:
      - "80"

  redis:
    container_name: "redis"
    image: redis:6-alpine
    ports:
      - "6379:6379"
      
volumes:
  permissions-db:
  manager-db:
  blob:
    external: false
